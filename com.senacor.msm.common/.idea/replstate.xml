<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1486199912635">{:repl-history {:ide [], :local [&quot;(def f (future (println \&quot;DEB\&quot;) 1))&quot; &quot;(def f (future (println \&quot;DEB\&quot;) 100))&quot; &quot;(require com.senacor.msm.common.zmq_tests)&quot; &quot;(require 'com.senacor.msm.common.zmq_tests :as t)&quot; &quot;(future (server))&quot; &quot;(class bytes)&quot; &quot;(com.senacor.msm.common.net/charset)&quot; &quot;com.senacor.msm.common.net/charset&quot; &quot;(def ^String t \&quot;UTF-8\&quot;)&quot; &quot;t&quot; &quot;(UUID.)&quot; &quot;(UUID/randomUUID)&quot; &quot;(.toString (UUID/randomUUID))&quot; &quot;(class {:a 1})&quot; &quot;(deref *1)&quot; &quot;(future (com.senacor.msm.common.zmq-tests/server))&quot; &quot;(deref *2\n       )&quot; &quot;(require 'com.senacor.msm.common.zmq_tests)&quot; &quot;(com.senacor.msm.common.zmq-tests/kurzschluss)&quot; &quot;(let [context (zmq/zcontext)]\n  (with-open [requester (doto (zmq/socket context :req)\n                          (zmq/connect \&quot;tcp://127.0.0.1:5559\&quot;))]\n    (dotimes [i 10]\n      (zmq/send-str requester \&quot;Hello\&quot;)\n      (let [string (zmq/receive-str requester)]\n        (printf \&quot;Received reply %d [%s]\\n\&quot; i string)))))&quot; &quot;(System/getProperty \&quot;java.library.path\&quot;)&quot; &quot;(Thread. com.senacor.msm.common.zmq-tests/server)&quot; &quot;(Thread)&quot; &quot;(run (Thread. com.senacor.msm.common.zmq-tests/server))&quot; &quot;(start (Thread. com.senacor.msm.common.zmq-tests/server))&quot; &quot;(start ^Thread (Thread. com.senacor.msm.common.zmq-tests/server))&quot; &quot;(.start (Thread. com.senacor.msm.common.zmq-tests/server))&quot; &quot;(com.senacor.msm.common.zmq-tests/client)&quot; &quot;(+ 1 2)&quot; &quot;(class #\&quot;expr\&quot;)&quot; &quot;(.pattern #\&quot;expr.+\&quot;)&quot; &quot;(.quote #\&quot;expr.+\&quot;)&quot; &quot;(.quote #\&quot;expr.+\&quot; \&quot;expr\&quot;)&quot; &quot;(import 'java.util.regex Pattern)&quot; &quot;(Pattern/quote #\&quot;expr.+\&quot; \&quot;expr\&quot;)&quot; &quot;(Pattern/quote \&quot;expr\&quot;)&quot; &quot;()&quot; &quot;(Pattern/quote \&quot;expr.+\&quot;)&quot; &quot;(re-matches #\&quot;^(\\w/\\-)+\&quot; \&quot;/opt/net\&quot;)&quot; &quot;(re-matches #\&quot;^(\\w/\\-)+\&quot; \&quot;rcs\&quot;)&quot; &quot;(re-matches #\&quot;(\\w/\\-)+\&quot; \&quot;rcs\&quot;)&quot; &quot;(re-matches #\&quot;(\\w)+\&quot; \&quot;rcs\&quot;)&quot; &quot;(re-matches #\&quot;^(\\w)+\&quot; \&quot;rcs\&quot;)&quot; &quot;(re-matches #\&quot;^(\\w/)+\&quot; \&quot;rcs\&quot;)&quot; &quot;(re-matches #\&quot;^(\\w\\/)+\&quot; \&quot;rcs\&quot;)&quot; &quot;(re-matches #\&quot;^\\w+\&quot; \&quot;rcs\&quot;)&quot; &quot;(re-matches #\&quot;^(\\w|/|\\-)+\&quot; \&quot;rcs\&quot;)&quot; &quot;(re-matches #\&quot;^(\\w|/|\\-)+\&quot; \&quot;/rcs\&quot;)&quot; &quot;(re-matches #\&quot;^(\\w|/|\\-)+\&quot; \&quot;/rcs/mein-humbug\&quot;)&quot; &quot;(re-matches #\&quot;^(\\w|/|\\-)+\&quot; \&quot;/rcs/mein-humbug/.*\&quot;)&quot; &quot;(re-matches #\&quot;^(\\w|/|\\-)+.*\&quot; \&quot;/rcs/mein-humbug/.*\&quot;)&quot; &quot;(re-matches #\&quot;^(\\w|/|\\-+).*\&quot; \&quot;/rcs/mein-humbug/.*\&quot;)&quot; &quot;(re-seq #\&quot;^(\\w|/|\\-+).*\&quot; \&quot;/rcs/mein-humbug/.*\&quot;)&quot; &quot;(re-find #\&quot;^(\\w|/|\\-+).*\&quot; \&quot;/rcs/mein-humbug/.*\&quot;)&quot; &quot;(re-find #\&quot;^(\\w|/|\\-+)(.*)\&quot; \&quot;/rcs/mein-humbug/.*\&quot;)&quot; &quot;(re-find #\&quot;^(\\w)(.*)\&quot; \&quot;/rcs/mein-humbug/.*\&quot;)&quot; &quot;(re-find #\&quot;^(/|\\w)(.*)\&quot; \&quot;/rcs/mein-humbug/.*\&quot;)&quot; &quot;(re-matches #\&quot;^(/|\\w)(.*)\&quot; \&quot;/rcs/mein-humbug/.*\&quot;)&quot; &quot;(re-find #\&quot;^(/|\\w)\&quot; \&quot;/rcs/mein-humbug/.*\&quot;)&quot; &quot;(re-find #\&quot;^(/|\\w)+\&quot; \&quot;/rcs/mein-humbug/.*\&quot;)&quot; &quot;(re-find #\&quot;^(/|\\-|\\w)+\&quot; \&quot;/rcs/mein-humbug/.*\&quot;)&quot; &quot;(require 'com.senacor.msm.common.net :as net)&quot; &quot;(use 'com.senacor.msm.common.net)&quot; &quot;(net/create-client-socket \&quot;epgm://en0;239.192.0.1:7777\&quot;)&quot; &quot;(net/zsend *1 \&quot;TEST\&quot; \&quot;TEST\&quot;)&quot; &quot;(doto (:socket *2)\n  (zsend \&quot;TEST\&quot; \&quot;TEST\&quot;))&quot; &quot;(:socket *1)&quot; &quot;(:socket *4)&quot; &quot;(doto (:a {:a 1, :b 2})\n  (println))&quot; &quot;(doto (:socket s)\n  (net/zsend \&quot;TEST\&quot; \&quot;TEST\&quot;))&quot; &quot;(def zs (:socket s))&quot; &quot;zs&quot; &quot;(doto zs\n  (zsend \&quot;TEST\&quot; \&quot;TEST\&quot;))&quot; &quot;(doto zs\n  (net/zsend \&quot;TEST\&quot; \&quot;TEST\&quot;))&quot; &quot;(doto zs\n  (zmq/send-str zs \&quot;TEST\&quot;))&quot; &quot;(zmq/send-str zs \&quot;TEST\&quot;)&quot; &quot;(doto zs\n  (zmq/send-str \&quot;TEST\&quot;))&quot; &quot;(first s)&quot; &quot;(first (first s))&quot; &quot;(name (first (first s)))&quot; &quot;(namespace (first (first s)))&quot; &quot;(:socket s)&quot; &quot;(zsend s \&quot;TEST\&quot; \&quot;TEST\&quot;)&quot; &quot;(require '[zeromq.zmq :as zmq])&quot; &quot;(require [com.senacor.msm.common.net :as net])&quot; &quot;(require '[com.senacor.msm.common.net :as net])&quot; &quot;(def s (net/create-client-socket \&quot;epgm://en0;239.192.0.1:7777\&quot;))&quot; &quot;(net/zsend s \&quot;TEST\&quot; \&quot;TEST\&quot;)&quot; &quot;(.toString nil)&quot; &quot;(str \&quot;target\&quot; File/separator \&quot;testdata\&quot; File/separator)&quot; &quot;(str/join File/separator [\&quot;target\&quot; \&quot;testdata\&quot;])&quot; &quot;(Runtime/getRuntime)&quot; &quot;(System/getProperties)&quot; &quot;(java.lang.management.ManagementFactory/getRuntimeMXBean)&quot; &quot;(.getName (java.lang.management.ManagementFactory/getRuntimeMXBean))&quot; &quot;(let [[a b c]] [1 2]\n               (print a b c))&quot; &quot;(let [[a b c] [1 2]]\n  (print a b c))&quot; &quot;(when nil (print \&quot;nil\&quot;))&quot; &quot;(use 'com.senacor.msm.common.demo)&quot; &quot;(trace \&quot;epgm://en0;239.192.0.1:7777\&quot; \&quot;\&quot;)&quot; &quot;(trace \&quot;epgm://en0;239.192.0.1:7777\&quot;)&quot;], :remote []}}</component>
</project>