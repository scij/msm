<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1491808192437">{:repl-history {:ide [], :local [&quot;(str :hallo)&quot; &quot;(.getBytes \&quot;M\&quot;)&quot; &quot;(get (.getBytes \&quot;M\&quot;) 0)&quot; &quot;(get (.getBytes \&quot;X\&quot;) 0)&quot; &quot;(UUID/randomUUID)&quot; &quot;(.toString (UUID/randomUUID))&quot; &quot;(&gt; 10 11)&quot; &quot;(blank? \&quot;\&quot;)&quot; &quot;(str/blank? \&quot;\&quot;)&quot; &quot;(bb/bytebuffer 10)&quot; &quot;(bytebuffer 10)&quot; &quot;(map Integer/parseInt [1 2 3])&quot; &quot;(map Integer/parseInt [\&quot;1\&quot; \&quot;2\&quot; \&quot;3\&quot;])&quot; &quot;(Integer/parseInt \&quot;2\&quot;)&quot; &quot;Integer/parseInt&quot; &quot;(Character/getNumericValue \&quot;A\&quot;)&quot; &quot;(.charValue 'A')&quot; &quot;(.charValue \\A)&quot; &quot;(Character/getNumericValue \\Å)&quot; &quot;(.getBytes \&quot;Hallo\&quot;)&quot; &quot;(byte \\C)&quot; &quot;(count (byte-array [1 2 3]))&quot; &quot;(map = (.getBytes \&quot;hi\&quot;) (.getBytes \&quot;hi\&quot;))&quot; &quot;(reduce and true 'true true)&quot; &quot;(reduce and '(true true))&quot; &quot;(reduce and* '(true true))&quot; &quot;(every? identity (true true))&quot; &quot;(every? identity '\n    (true true))&quot; &quot;(com.senacor.msm.norm.msg-test/bytes-eq? (.getBytes \&quot;hi\&quot;) (.getBytes \&quot;hi\&quot;))&quot; &quot;(get 1 (byte-array [1 2 3]))&quot; &quot;((byte-array [1 2 3]) 1)&quot; &quot;(nth (byte-array [1 2 3]) 1)&quot; &quot;(count (byte-array 1024))&quot; &quot;(conj 1 [ 2 3 4])&quot; &quot;(conj [1 2 3] 5)&quot; &quot;(conj [1 2 3] 4)&quot; &quot;(conj '(1 2 3) 4)&quot; &quot;(byte \\M)&quot; &quot;(byte \\X)&quot; &quot;(loop [b (byte-array 3)]\n  (print \&quot;b\&quot;))&quot; &quot;()&quot; &quot;\n(+ 1 2)&quot; &quot;(let [msgs (byte-array 3)]\n  (loop [m msgs]\n    (println \&quot;b\&quot;)\n    (recur (rest msgs))))&quot; &quot;(require 'manifold.stream)&quot; &quot;(require [manifold.stream :as s])&quot; &quot;(require '[manifold.stream :as s])&quot; &quot;(require '[manifold.deferred :as d])&quot; &quot;(require '[gloss.core :as g])&quot; &quot;(def protocol (g/compile-frame\n                (g/finite-frame :byte (g/string :utf-8))))&quot; &quot;(require '[gloss.io :as io])&quot; &quot;(defn wrap-duplex-stream [prot s]\n  (let [out (s/stream)]\n    (s/connect\n      (s/map #(io/encode prot %) out)\n      s)\n    (s/splice\n      out(io/decode-stream s prot))))&quot; &quot;(def s (s/stream))&quot; &quot;(s/consume (io/decode-stream s protocol))&quot; &quot;(io/decode-stream s protocol)&quot; &quot;(s/put! (io/encode protocol \&quot;hallo\&quot;))&quot; &quot;(s/put! s (io/encode protocol \&quot;hallo\&quot;))&quot; &quot;(def in (s/stream))&quot; &quot;(def out (io/decode-stream s protocol))&quot; &quot;(s/consume #(print %1) out)&quot; &quot;(s/put! in (io/encode protocol \&quot;hallo\&quot;))&quot; &quot;(s/take! out)&quot; &quot;(.toByteArray \&quot;hallo\&quot;)&quot; &quot;(.getBytes \&quot;hallo\&quot;)&quot; &quot;(map #(print %1) (.getBytes \&quot;hallo\&quot;))&quot; &quot;(map #(print \&quot;:\&quot; %1 \&quot;:\&quot; ) (.getBytes \&quot;hallo\&quot;))&quot; &quot;(s/take! out)&quot; &quot;@out&quot; &quot;(io/encode-to-stream protocol in \&quot;hallo\&quot;)&quot; &quot;(s/put-all! in (io/encode protocol \&quot;hallo\&quot;))&quot; &quot;(d/deferred? s)&quot; &quot;(s/take! in)&quot; &quot;(byte-array 10)&quot; &quot;(.array (byte-array 10))&quot; &quot;(import java.nio.ByteBuffer)&quot; &quot;(.array (byte-buffer 10))&quot; &quot;(bb/put-byte (bytebuffer) \\l)&quot; &quot;(bb/put-byte (bb/bytebuffer) \\l)&quot; &quot;(bb/put-byte (bb/byte-buffer) \\l)&quot; &quot;(bb/put-byte (bb/byte-buffer 10) \\l)&quot; &quot;(bb/put-byte (bb/byte-buffer 10) \\l)&quot; &quot;(doto (bb/byte-buffer 100)\n  (bb/put-byte 77))&quot; &quot;(doto (bb/byte-buffer 100)\n  (bb/put-byte 77)\n  (.put (.getBytes \&quot;hallo\&quot;)))&quot; &quot;(java.util.UUID/randomUUID)&quot; &quot;(.toString(java.util.UUID/randomUUID))&quot; &quot;(msg/Message-&gt;bytebuffer (msg/create-message \&quot;label\&quot; \&quot;uuid\&quot; \&quot;payload\&quot;))&quot; &quot;(def m (msg/create-message \&quot;label\&quot; \&quot;uuid\&quot; \&quot;payload\&quot;))&quot; &quot;m&quot; &quot;msg/msg-codec&quot; &quot;(def mb (msg/Message-&gt;bytebuffer m))&quot; &quot;mb&quot; &quot;(gloss.io/contiguous mb)&quot; &quot;(int \\b)&quot; &quot;(byte \\b)&quot;], :remote []}}</component>
</project>