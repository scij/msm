<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1497981442663">{:repl-history {:ide [], :local [&quot;(def in (s/stream))&quot; &quot;(def out (io/decode-stream s protocol))&quot; &quot;(s/consume #(print %1) out)&quot; &quot;(s/put! in (io/encode protocol \&quot;hallo\&quot;))&quot; &quot;(s/take! out)&quot; &quot;(.toByteArray \&quot;hallo\&quot;)&quot; &quot;(map #(print %1) (.getBytes \&quot;hallo\&quot;))&quot; &quot;(map #(print \&quot;:\&quot; %1 \&quot;:\&quot; ) (.getBytes \&quot;hallo\&quot;))&quot; &quot;(s/take! out)&quot; &quot;@out&quot; &quot;(io/encode-to-stream protocol in \&quot;hallo\&quot;)&quot; &quot;(s/put-all! in (io/encode protocol \&quot;hallo\&quot;))&quot; &quot;(d/deferred? s)&quot; &quot;(s/take! in)&quot; &quot;(byte-array 10)&quot; &quot;(.array (byte-array 10))&quot; &quot;(import java.nio.ByteBuffer)&quot; &quot;(.array (byte-buffer 10))&quot; &quot;(bb/put-byte (bytebuffer) \\l)&quot; &quot;(bb/put-byte (bb/bytebuffer) \\l)&quot; &quot;(bb/put-byte (bb/byte-buffer) \\l)&quot; &quot;(bb/put-byte (bb/byte-buffer 10) \\l)&quot; &quot;(bb/put-byte (bb/byte-buffer 10) \\l)&quot; &quot;(doto (bb/byte-buffer 100)\n  (bb/put-byte 77))&quot; &quot;(doto (bb/byte-buffer 100)\n  (bb/put-byte 77)\n  (.put (.getBytes \&quot;hallo\&quot;)))&quot; &quot;(java.util.UUID/randomUUID)&quot; &quot;(.toString(java.util.UUID/randomUUID))&quot; &quot;(msg/Message-&gt;bytebuffer (msg/create-message \&quot;label\&quot; \&quot;uuid\&quot; \&quot;payload\&quot;))&quot; &quot;(def m (msg/create-message \&quot;label\&quot; \&quot;uuid\&quot; \&quot;payload\&quot;))&quot; &quot;m&quot; &quot;msg/msg-codec&quot; &quot;(def mb (msg/Message-&gt;bytebuffer m))&quot; &quot;mb&quot; &quot;(gloss.io/contiguous mb)&quot; &quot;(int \\b)&quot; &quot;(byte \\b)&quot; &quot;(= (bytes 2)(bytes 2))&quot; &quot;(= (byte-array 2) (byte-array 2))&quot; &quot;(= (String. (byte-array 2)) (String. (byte-array 2)))&quot; &quot;(doseq [v {:a 1, :b 2}]\n  (prn v))&quot; &quot;(s/-&gt;source (byte-array 100))&quot; &quot;(byte \\n)&quot; &quot;(byte (first \&quot;\\n\&quot;))&quot; &quot;(byte (first \&quot;\\r\&quot;))&quot; &quot;(def q (PersistentQueue/EMPTY))&quot; &quot;(conj q 1)&quot; &quot;(-&gt; q\n    (conj [1 2 3])\n    (conj 4)\n    (pop))&quot; &quot;(&gt;= 10 11)&quot; &quot;(-&gt; (bb/byte-buffer 10)\n    (bb/put-int 20)\n    (.capacity)\n    )&quot; &quot;(-&gt; (bb/byte-buffer 10)\n    (bb/put-int 20)\n    (.position)\n    )&quot; &quot;(-&gt; (bb/byte-buffer 10)\n    (bb/put-int 20)\n    (.limit)\n    )&quot; &quot;(conj [1 2] 3)&quot; &quot;(conj '(1 2) 3)&quot; &quot;(count \&quot;label\&quot;)&quot; &quot;(count (.getBytes \&quot;label\&quot;))&quot; &quot;(merge {:a 1 :b 2} {:b 3 :c 4})&quot; &quot;(+ 1 1\n   )&quot; &quot;(require '[com.senacor.msm.norm.msg :as msg])&quot; &quot;(require '[com.senacor.msm.norm.msg-test :as mt])&quot; &quot;(mt/fill-buffer (bb/byte-buffer mt/fix-buflen) :flip)&quot; &quot;(.array (mt/fill-buffer (bb/byte-buffer mt/fix-buflen) :flip))&quot; &quot;(+ 1 2)&quot; &quot;(.getBytes \&quot;hallo\&quot;)&quot; &quot;(count (.getBytes \&quot;hallo\&quot;))&quot; &quot;(loop [a 1 b 0]\n  (println a)\n  (when (&lt; a 10)\n    (apply recur [(+ a 1) 0])))&quot; &quot;(count \&quot;abc\&quot;)&quot; &quot;(- 11 4 1)&quot; &quot;(byte 97)&quot; &quot;(char (byte 97))&quot; &quot;\&quot;5 108 97 98 25964 74806633\&quot;&quot; &quot;(char (byte 108))&quot; &quot;(.remaining (ByteBuffer/wrap (.getBytes \&quot;hallo\&quot;)))&quot; &quot;(merge {}\n       {:a 1}\n       {:b 2})&quot; &quot;(loop [i 0]\n  (when (&lt; i 10)\n    (recur (inc i)))\n  i)&quot; &quot;if&quot; &quot;(loop [i 0]\n  (if (&lt; i 10)\n    (recur (inc i))\n    i))&quot; &quot;()&quot; &quot;(loop [i 0]\n  (if (&lt; i 10)\n    (recur (inc i))\n    (+ i 10)))&quot; &quot;(= nil (byte \\M))&quot; &quot;(log/trace \&quot;trace\&quot;)&quot; &quot;(log/error \&quot;Error\&quot;)&quot; &quot;(log/enabled? :error)&quot; &quot;(log/enabled? :trace)&quot; &quot;(log/find-factory)&quot; &quot;log/*logger-factory*&quot; &quot;; observation: fill-buffer-with-testdata schreibt nur eine Nachricht in den buffer&quot; &quot;(String ^bytes nil)&quot; &quot;(def )&quot; &quot;(String.\n  ^bytes nil)&quot; &quot;(def m nil)&quot; &quot;(String ^bytes m)&quot; &quot;(String.\n  ^bytes m)&quot; &quot;(if m m \&quot;nil\&quot;)&quot; &quot;(-&gt; \&quot;\&quot; String. .getBytes)&quot; &quot;(declare foo)&quot; &quot;(def foo-var f)&quot; &quot;(def foo-var foo)&quot; &quot;(defn foo [] (println \&quot;foo\&quot;))&quot; &quot;(foo)&quot; &quot;foo-var&quot; &quot;(+ 1 1)&quot;], :remote []}}</component>
</project>